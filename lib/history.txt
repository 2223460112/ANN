1:
在我实现最早的版本的过程中，大量的使用了指针以增加可扩展性，但最终为了储存网络结构等问题，选择使用数组的形式统一保存上下游节点列表等信息。
因此，Unit与Layer的实现过程中，所有的指针将在总体上是连续的，并且他们将从一个统一的数组取值，以实现对代码尽可能少的修改。
发现了这样的问题后，我认为定期的思路整理与代码检查是有必要的，必须保证各文件实现时思路的连贯性与可扩展性。
2:
数组模拟指针替换了数组指针并存的体系以解决vector内存位置变化的问题。
在初始化过程中去除了上下游列表的部分，删除了上游列表，改为在进程完毕后调用FIXDlist();
3:
加入了保存功能
结构:
//////////////////////////////
4b:层数{
1b节点种类 节点1 1b节点种类 节点2...
...
}
Dlist数{
type:-1?list:lnk
}
矩阵数
Learnrate
{
1b:层的种类 层1
...
}
//////////////////////////////
节点{
(loss)step Ds rows cols W bias
}
